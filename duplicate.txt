		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>
typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>
typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>
typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>
typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>
typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>
typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>
typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>
typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>
typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>
typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>
typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>
typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>
typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>
typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>
typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>
typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>
typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>
typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>
typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>
typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}
void insert(node *temp, int index, char * new_line) {
	int balance;

	if (temp != NULL) {

		if (temp->key > index) {
			ins_t = temp;
			insert(temp->left, index, new_line);
		} else if (temp->key < index) {
			ins_t = temp;
			insert(temp->right, index, new_line);
		} else if (temp->key == index) {
			node *temp2;
			temp2 = getNode();
			temp2->line= new_line;
			temp2->key=index;
			temp2->left = temp->left;
			temp->left = NULL;
			balance = balanceCheck(temp);
			if (balance > 1 || balance < -1) {
				balanceTree(balance, temp,ins_t);
			}
			if (ins_t->key > temp2->key) {
				temp = ins_t->left;
				ins_t->left = temp2;
			} else {
				temp = ins_t->right;
				ins_t->right = temp2;
			}
			temp2->right = temp;
			ins_t = temp2;
		}
		temp->height = 1 + max(height(temp->left), height(temp->right));
	} else {
		node *temp2 = getNode();
		temp2->key = index;
		temp2->left = NULL;
		temp2->right = NULL;
		temp2->line = new_line;
		if (ins_t->key > temp2->key) {
			temp = ins_t->left;
			ins_t->left = temp2;
		} else {
			temp = ins_t->right;
			ins_t->right = temp2;
		}
	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>

typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
}	}
}

void append_line(text_t *txt, char * new_line) {
	txt->length = txt->length + 1;
	int balance =0;
	node *root2 = txt->root;
	rt = root2;
	if (root2 == NULL) {
		root2 = getNode();
		root2->key = 1;
		root2->line = new_line;
		root2->height = 0;
		root2->left = NULL;
		root2->right = NULL;
		txt->root = root2;
	} else {
		int key2 = length_text(txt);
		append(root2,key2,new_line);
		root2->height = 1 + max(height(root2->left), height(root2->right));
	}
}
#include<stdlib.h>
#include<stdio.h>
typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
typedef struct node {
	int key;
	struct node *left;
	struct node *right;
	int height;
	char *line;
} node;

typedef struct text_t {
	node *root; //root node
	int length;
} text_t;
node *rt;
node *ins_t;
node *del_t;
char *del_line;
int length_text(text_t *txt);
node * getNode();
int height(node *temp);
int balanceCheck(node *temp);
void balanceTree(int balance, node *temp, node *t);
void insert(node *temp, int index, char * new_line);
void append_line(text_t *txt, char * new_line);
void inorder_inc_key(node *temp);
void inorder_dec_key(node *temp,int index);
node * right_rotation(node *temp);
node * left_rotation(node *temp);
void deleteLine(node *temp, int index);
node * find_subs(node *temp);
node *parsing(node *temp, int index);
int max(int x, int y);
void append(node * temp,int index, char * new_line);

void insert_line(text_t *txt, int index, char * new_line) {
	int length = length_text(txt);
	txt->length = txt->length + 1;
	node *temp;
	temp = txt->root;
	if (temp == NULL) {
		temp = getNode();
		temp->key = 1;
		temp->line = new_line;
		temp->height = 0;
		temp->left = NULL;
		temp->right = NULL;
	} else if (index <= length) {
		insert(temp, index, new_line);
		inorder_inc_key(ins_t->right);
	} else {
		append_line(txt, new_line);
	}
